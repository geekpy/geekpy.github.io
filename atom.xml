<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geekpy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-12T05:26:02.394Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>geekpy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/08/12/flask_celery/"/>
    <id>http://yoursite.com/2018/08/12/flask_celery/</id>
    <published>2018-08-12T10:18:18.000Z</published>
    <updated>2018-08-12T05:26:02.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本最佳实践是基于作者有限的经验，欢迎大家共同讨论，可以持续维护此最佳实践。另本文中所使用的环境为Mac&amp;Ubuntu环境，软件版本如下：</p><ul><li>Celery (4.1.0)</li><li>Flask (0.12.1)</li><li>RabbitMQ(3.6.9)</li><li>librabbitmq (1.6.1)</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>简单来说Celery是一个异步的任务队列，当我们需要将一些任务(比如一些需要长时间操作的任务)异步操作的时候，这时候Celery就可以帮到我们，另外Celery还支持定时任务(类似Crontab)。详细的介绍可以参考<a href="http://www.celeryproject.org/" target="_blank" rel="noopener">官网</a></p><h2 id="使用RabbitMQ作为Broker"><a href="#使用RabbitMQ作为Broker" class="headerlink" title="使用RabbitMQ作为Broker"></a>使用RabbitMQ作为Broker</h2><p>RabbitMQ是官方推荐使用的Broker，它实际是一个消息中间件，负责消息的路由分发，安装RabbitMQ如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># install on Ubuntu</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install rabbitmq-server -yq</span><br></pre></td></tr></table></figure></p><p>需要注意的是，线上环境我们需要创建新的账号，并将guest账号删除，操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user myuser mypassword  # 新增用户</span><br><span class="line">rabbitmqctl add_vhost myvhost  # 新增vhost，以使用不同的命名空间</span><br><span class="line">rabbitmqctl set_permissions -p myvhost myuser &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;  # 设置权限</span><br><span class="line">rabbitmqctl  delete_user guest  # 安全原因，删除guest</span><br></pre></td></tr></table></figure></p><p>注意：vhost是一个虚拟空间，用于区分不同类型的消息<br>然后，在Celery的配置中配置broker URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERY_BROKER_URL = &apos;amqp://myuser:mypassword@localhost:5672/myvhost&apos;</span><br></pre></td></tr></table></figure></p><p>注意：当使用amqp协议头时，如果安装有<code>librabbitmq</code>则使用<code>librabbitmq</code>，否则使用pyamqp</p><h2 id="Celery的日志输出"><a href="#Celery的日志输出" class="headerlink" title="Celery的日志输出"></a>Celery的日志输出</h2><p>在task中想要输出日志，最好的方法是通过如下方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from celery.utils.log import get_task_logger</span><br><span class="line"></span><br><span class="line">lg = get_task_logger(__name__)</span><br><span class="line"></span><br><span class="line">@celery.task</span><br><span class="line">def log_test():</span><br><span class="line">    lg.debug(&quot;in log_test()&quot;)</span><br></pre></td></tr></table></figure></p><p>但是仅如此会发现所有的日志最后都跑到shell窗口的stdout当中，原来必须得在启动celery的时候使用-f option来指定输出文件，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A main.celery worker -l debug -f log/celery/celery_task.log &amp;</span><br></pre></td></tr></table></figure></p><p>-A：指定celery实例<br>worker: 启动worker进程<br>-l：指定log level，这里指定log level为debug level<br>-f：指定输出的日志文件</p><h2 id="使用Redis作为backend"><a href="#使用Redis作为backend" class="headerlink" title="使用Redis作为backend"></a>使用Redis作为backend</h2><p>当使用Redis作为存储后端的时候，我们可以通过设置DB number来使得Celery的结果存储与其它数据存储隔离开来，比如在笔者的项目中，redis还用作缓存的存储后端，因此为了区分，Celery在使用Redis的时候使用的DB number是1（默认是0），关于Redis DB number可以参考<a href="http://blog.teeceepee.com/blog/2015/02/14/redis-db-number/" target="_blank" rel="noopener">这里</a>.<br>因此我们的backend设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERY_RESULT_BACKEND = &apos;redis://localhost:6379/1&apos; # 最后的数字1代表DB number</span><br></pre></td></tr></table></figure></p><p>查看Celery任务的结果可以通过Redis-cli连接Redis数据库进行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; redis-cli</span><br><span class="line">&gt; select 1 # 这里选择DB 1， 也可以在使用redis-cli -n 1来进入指定的DB</span><br><span class="line">&gt; get key # 获取指定key对应的结果</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/3959253-5674ca727b61be6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="redis-cli.jpg"></p><h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><p>我认为此处是非常重要的一个技巧，即在调试代码的时候，我们可以将<code>delay</code>或者<code>apply_async</code>先去掉，直接调用worker的函数进行同步调试，调试成功后再加上<code>delay</code>或者<code>apply_async</code> method</p><h2 id="Celery可能会遇到的坑"><a href="#Celery可能会遇到的坑" class="headerlink" title="Celery可能会遇到的坑"></a>Celery可能会遇到的坑</h2><h4 id="Celery4-x版本使用librabbitmq的问题"><a href="#Celery4-x版本使用librabbitmq的问题" class="headerlink" title="Celery4.x版本使用librabbitmq的问题"></a>Celery4.x版本使用librabbitmq的问题</h4><p>Celery 4.x版本在使用librabbitmq时，会出现类似这样的错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Received and deleted unknown message.  Wrong destination?!?</span><br></pre></td></tr></table></figure></p><p>完整错误如图：<br><img src="http://upload-images.jianshu.io/upload_images/3959253-43eac6585498fc34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="celeryerror"></p><p>解决这个问题有两个方式：</p><ol><li><p>推荐方式，更改配置项<em>task_protocol</em>为1。<br>Github上Robert Kopaczewski详细解释了这个问题，原文如下：</p><blockquote><p>Apparently librabbitmq issue is related to new default protocol in celery 4.x. You can switch to previous protocol version by either putting CELERY_TASK_PROTOCOL = 1 in your settings if you’re using Django or settings app.conf.task_protocol = 1 in celeryconf.py.</p></blockquote></li><li><p>另一种方式是不使用librabbitmq, 通过pip uninstall librabbitmq, 并且更改broker配置的协议头为’pyamqp’,如下，也可以解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BROKER_URL = &apos;pyamqp://guest:guest@localhost:5672/%2F&apos;</span><br></pre></td></tr></table></figure></li></ol><p>由于librabbitmq的性能优势，我们还是推荐方式1来解决该问题。</p><h4 id="RabbitMQ远程连接问题"><a href="#RabbitMQ远程连接问题" class="headerlink" title="RabbitMQ远程连接问题"></a>RabbitMQ远程连接问题</h4><p>如果RabbitMQ与Celery不在同一台机器上，除在Celery配置的时候要将<code>BROKER_URL</code>设置为正确的IP地址外，还需要将Rabbitmq的配置文件<code>/usr/local/etc/rabbitmq/rabbitmq-env.conf</code>中的<code>NODE_IP_ADDRESS</code>更改为0.0.0.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_IP_ADDRESS=0.0.0.0</span><br></pre></td></tr></table></figure></p><h4 id="Celery-import问题"><a href="#Celery-import问题" class="headerlink" title="Celery import问题"></a>Celery import问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">The message has been ignored and discarded.</span><br><span class="line"></span><br><span class="line">Did you remember to import the module containing this task?</span><br><span class="line">Or maybe you&apos;re using relative imports?</span><br><span class="line"></span><br><span class="line">Please see</span><br><span class="line">http://docs.celeryq.org/en/latest/internals/protocol.html</span><br><span class="line">for more information.</span><br><span class="line"></span><br><span class="line">The full contents of the message body was:</span><br><span class="line">&apos;\x8e\xa7expires\xc0\xa3utc\xc3\xa4args\x91\x85\xa3tid\xb85971a43d47f84bb278f77fc2\xa3sen\xa2A1\xa2tt\xa2ar\xa2co\xc4\x00\xa1t\xa4like\xa5chord\xc0\xa9callbacks\xc0\xa8errbacks\xc0\xa7taskset\xc0\xa2id\xc4$c133dbf8-2c89-4311-b7cf-c377041058ec\xa7retries\x00\xa4task\xd9$tasks.messageTasks.send_like_message\xa5group\xc0\xa9timelimit\x92\xc0\xc0\xa3eta\xc0\xa6kwargs\x80&apos; (239b)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/Users/liufeng/.pyenv/versions/2.7.13/envs/kaopu_backend/lib/python2.7/site-packages/celery/worker/consumer/consumer.py&quot;, line 561, in on_task_received</span><br><span class="line">    strategy = strategies[type_]</span><br><span class="line">KeyError: u&apos;tasks.messageTasks.send_like_message&apos;</span><br></pre></td></tr></table></figure><p>出现这条错误是由于我们的tasks跟celery并不是在同一个文件中，即不是同一个module，当我们通过如下命令启动task worker时，实际只加载了app module，而没有加载tasks相关的module<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery -A app.celery worker -l info</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>要解决这个问题，必须为celery配置文件添加import参数，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&apos;imports&apos;] = [&apos;tasks.messageTasks&apos;]</span><br></pre></td></tr></table></figure></p><h4 id="Celery-unregistered-task问题"><a href="#Celery-unregistered-task问题" class="headerlink" title="Celery unregistered task问题"></a>Celery unregistered task问题</h4><p>在开发过程中遇到了这样一个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[2017-08-31 15:38:19,605: ERROR/MainProcess] Received unregistered task of type u&apos;app.tasks.messageTasks.send_follow_message&apos;.</span><br><span class="line">The message has been ignored and discarded.</span><br><span class="line"></span><br><span class="line">Did you remember to import the module containing this task?</span><br><span class="line">Or maybe you&apos;re using relative imports?</span><br><span class="line"></span><br><span class="line">Please see</span><br><span class="line">http://docs.celeryq.org/en/latest/internals/protocol.html</span><br><span class="line">for more information.</span><br><span class="line"></span><br><span class="line">The full contents of the message body was:</span><br><span class="line">&apos;\x8e\xa7expires\xc0\xa3utc\xc3\xa4args\x91\x86\xa6sender\xa5Jenny\xa9target_id\xb859a5313847f84be534ad7d46\xabtarget_type\xa4user\xa7content\xc4\x00\xa8receiver\xb859a5313847f84be534ad7d46\xa4type\xa6follow\xa5chord\xc0\xa9callbacks\xc0\xa8errbacks\xc0\xa7taskset\xc0\xa2id\xc4$a4d40c14-1976-41a6-a753-d2a495929920\xa7retries\x00\xa4task\xd9*app.tasks.messageTasks.send_follow_message\xa5group\xc0\xa9timelimit\x92\xc0\xc0\xa3eta\xc0\xa6kwargs\x80&apos; (312b)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/Users/liufeng/.pyenv/versions/2.7.13/envs/kaopu_backend/lib/python2.7/site-packages/celery/worker/consumer/consumer.py&quot;, line 561, in on_task_received</span><br><span class="line">    strategy = strategies[type_]</span><br><span class="line">KeyError: u&apos;app.tasks.messageTasks.send_follow_message&apos;</span><br></pre></td></tr></table></figure></p><p>解决这个问题，最开始是根据提示，将所有涉及到task的module全部加上<code>from __future__ import absolute_import</code> 之后运行之后还是不行，后来发现是由于之前启动时使用的是app module， 但是我的代码已经改成了main.py，所以重新启动了celery，最后问题解决</p><h4 id="使用镜像迁移系统也依然需要重新添加rabbitmq的用户"><a href="#使用镜像迁移系统也依然需要重新添加rabbitmq的用户" class="headerlink" title="使用镜像迁移系统也依然需要重新添加rabbitmq的用户"></a>使用镜像迁移系统也依然需要重新添加rabbitmq的用户</h4><p>问题最开始是发现无法点赞，也无法Follow用户，通过http消息发现出现502错误，于是登录到服务器检查，发现应用服务本身没有任何报错，于是又去查看Celery的日志，结果发现出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2017-11-13 16:32:01,243: ERROR/MainProcess] consumer: Cannot connect to amqp://celeryuser:**@loc      alhost:5672/celeryvhost: Couldn&apos;t log in: a socket error occurred.</span><br></pre></td></tr></table></figure></p><p>经过一番搜索发现网上的评论主要是说URL不对的情况下会出现这种情况，但是我的URL没有改过啊，那又会是什么问题呢？继续看，发现有人提到了权限问题，于是又是一番检查，发现RabbitMQ中并没有原先设置的用户（我使用的是原系统的镜像，原以为用户也是已经设置好的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看有哪些用户</span><br><span class="line">rabbitmqctl  list_users</span><br></pre></td></tr></table></figure></p><p>然后就简单了，按照步骤创建用户，vhost，再赋予权限，删除guest，然后就终于都连好了</p><p>另外，发现从镜像复制系统后，RabbitMQ并不能正常工作，必须杀掉原先的进程，重新启动</p><h4 id="更改task的代码后，重启Celery"><a href="#更改task的代码后，重启Celery" class="headerlink" title="更改task的代码后，重启Celery"></a>更改task的代码后，重启Celery</h4><p>需要注意的是，在更改task的代码后，必须重新启动Celery，否则代码改动无法生效，可能导致一些意外的问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本最佳实践是基于作者有限的经验，欢迎大家共同讨论，可以持续维护此最佳实践。另本文中所使用的环境为Mac&amp;amp;Ubuntu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/08/12/flask_login_detail/"/>
    <id>http://yoursite.com/2018/08/12/flask_login_detail/</id>
    <published>2018-08-12T05:47:52.361Z</published>
    <updated>2018-08-12T05:47:52.361Z</updated>
    
    <content type="html"><![CDATA[<p>title: 使用Flask实现用户登陆认证的详细过程<br>date: 2016-12-06 11:57:18<br>layout: page<br>comments: true</p><h3 id="用户认证的原理"><a href="#用户认证的原理" class="headerlink" title="用户认证的原理"></a>用户认证的原理</h3><p>在了解使用Flask来实现用户认证之前，我们首先要明白用户认证的原理。假设现在我们要自己去实现用户认证，需要做哪些事情呢？</p><ol><li>首先，用户要能够输入用户名和密码，所以需要网页和表单，用以实现用户输入和提交的过程。</li><li>用户提交了用户名和密码，我们就需要比对用户名，密码是否正确，而要想比对，首先我们的系统中就要有存储用户名，密码的地方，大多数后台系统会通过数据库来存储，但是实际上我们也可以简单的存储到文件当中。(为简明起见，本文将用户信息存储到json文件当中)</li><li>登录之后，我们需要维持用户登录状态，以便用户在访问特定网页的时候来判断用户是否已经登录，以及是否有权限访问改网页。这就需要有维护一个会话来保存用户的登录状态和用户信息。</li><li>从第三步我们也可以看出，如果我们的网页需要权限保护，那么当请求到来的时候，我们就首先要检查用户的信息，比如是否已经登录，是否有权限等，如果检查通过，那么在response的时候就会将相应网页回复给请求的用户，但是如果检查不通过，那么就需要返回错误信息。</li><li>在第二步，我们知道要将用户名和密码存储起来，但是如果只是简单的用明文存储用户名和密码，很容易被“有心人”盗取，从而造成用户信息泄露，那么我们实际上应当将用户信息尤其是密码做加密处理之后再存储比较安全。</li><li>用户登出</li></ol><h3 id="通过Flask以及相应的插件来实现登录过程"><a href="#通过Flask以及相应的插件来实现登录过程" class="headerlink" title="通过Flask以及相应的插件来实现登录过程"></a>通过Flask以及相应的插件来实现登录过程</h3><p>接下来讲述如何通过Flask框架以及相应的插件来实现整个登录过程，需要用到的插件如下：</p><ul><li>flask-wtf</li><li>wtf</li><li>werkzeug</li><li>flask_login</li></ul><h4 id="使用flask-wtf和wtf来实现表单功能"><a href="#使用flask-wtf和wtf来实现表单功能" class="headerlink" title="使用flask-wtf和wtf来实现表单功能"></a>使用flask-wtf和wtf来实现表单功能</h4><p>flask-wtf对wtf做了一些封装，不过有些东西还是要直接用wtf，比如StringField等。flask-wtf和wtf主要是用于建立html中的元素和Python中的类的对应关系，通过在Python代码中操作对应的类，对象等从而控制html中的元素。我们需要在python代码中使用flask-wtf和wtf来定义前端页面的表单（实际是定义一个表单类），再将对应的表单对象作为render_template函数的参数，传递给相应的template，之后Jinja模板引擎会将相应的template渲染成html文本，再作为http response返回给用户。</p><p>定义表单类示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># forms.py</span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, BooleanField, PasswordField</span><br><span class="line">from wtforms.validators import DataRequired</span><br><span class="line"></span><br><span class="line"># 定义的表单都需要继承自FlaskForm</span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    # 域初始化时，第一个参数是设置label属性的</span><br><span class="line">    username = StringField(&apos;User Name&apos;, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;, validators=[DataRequired()])</span><br><span class="line">    remember_me = BooleanField(&apos;remember me&apos;, default=False)</span><br></pre></td></tr></table></figure></p><p>在wtf当中，每个域代表就是html中的元素，比如StringField代表的是<input type="text">元素，当然wtf的域还定义了一些特定功能，比如validators，可以通过validators来对这个域的数据做检查，详细请参考wtf教程。<br>对应的html模板可能如下login.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;layout.html&quot; %&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Login Page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=&quot;&#123;&#123; url_for(&quot;login&quot;) &#125;&#125;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            User Name:&lt;br&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            Password:&lt;/br&gt;</span><br><span class="line">            &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; name=&quot;remember_me&quot;/&gt;Remember Me</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">            &#123;&#123; form.csrf_token &#125;&#125; </span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&#123;% 这里\&#123;\&#123; form.csrf_token \&#125;\&#125;也可以使用&#123;&#123; form.hidden_tag() &#125;&#125;来替换i%&#125;</span><br></pre></td></tr></table></figure></p><p>同时我们也可以使用form去定义模板，跟直接用html标签去定义效果是相同的，Jinja模板引擎会将对象、属性转化为对应的html标签，<br>相对应的template，如下login.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 模板的语法应当符合Jinja语法 --&gt;</span><br><span class="line">&lt;!-- extend from base layout --&gt;</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;h1&gt;Sign In&lt;/h1&gt;</span><br><span class="line">  &lt;form action=&quot;&#123;&#123; url_for(&quot;login&quot;) &#125;&#125;&quot; method=&quot;post&quot; name=&quot;login&quot;&gt;</span><br><span class="line">      &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">          &#123;&#123; form.username.label &#125;&#125;&lt;br&gt;</span><br><span class="line">          &#123;&#123; form.username(size=80) &#125;&#125;&lt;br&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">          &#123;&#123; form.password.label &#125;&#125;&lt;br&gt;</span><br><span class="line">          &lt;!-- 我们可以传递input标签的属性，这里传递的是size属性 --&gt;</span><br><span class="line">          &#123;&#123; form.password(size=80) &#125;&#125;&lt;br&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; form.remember_me &#125;&#125; Remember Me&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Sign In&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>现在我们需要在view中定义相应的路由，并将相应的登录界面展示给用户。<br>简单起见，将view的相关路由定义放在主程序当中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># app.py</span><br><span class="line">@app.route(&apos;/login&apos;)</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    return render_template(&apos;login.html&apos;, title=&quot;Sign In&quot;, form=form)</span><br></pre></td></tr></table></figure></p><p>这里简单起见，当用户请求’/login’路由时，直接返回login.html网页，注意这里的html网页是经过Jinja模板引擎将相应的模板转换后的html网页。<br>至此，如果我们把以上代码整合到flask当中，就应该能够看到相应的登录界面了，那么当用户提交之后，我们应当怎样存储呢？这里我们暂时先不用数据库这样复杂的工具存储，先简单地存为文件。接下来就看下如何去存储。</p><h4 id="加密和存储"><a href="#加密和存储" class="headerlink" title="加密和存储"></a>加密和存储</h4><p>我们可以首先定义一个User类，用于处理与用户相关的操作，包括存储和验证等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"># models.py</span><br><span class="line"></span><br><span class="line">from werkzeug.security import generate_password_hash</span><br><span class="line">from werkzeug.security import check_password_hash</span><br><span class="line">from flask_login import UserMixin</span><br><span class="line">import json</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"># define profile.json constant, the file is used to</span><br><span class="line"># save user name and password_hash</span><br><span class="line">PROFILE_FILE = &quot;profiles.json&quot;</span><br><span class="line"></span><br><span class="line">class User(UserMixin):</span><br><span class="line">    def __init__(self, username):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.id = self.get_id()</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def password(self):</span><br><span class="line">        raise AttributeError(&apos;password is not a readable attribute&apos;)</span><br><span class="line"></span><br><span class="line">    @password.setter</span><br><span class="line">    def password(self, password):</span><br><span class="line">        &quot;&quot;&quot;save user name, id and password hash to json file&quot;&quot;&quot;</span><br><span class="line">        self.password_hash = generate_password_hash(password)</span><br><span class="line">        with open(PROFILE_FILE, &apos;w+&apos;) as f:</span><br><span class="line">            try:</span><br><span class="line">                profiles = json.load(f)</span><br><span class="line">            except ValueError:</span><br><span class="line">                profiles = &#123;&#125;</span><br><span class="line">            profiles[self.username] = [self.password_hash,</span><br><span class="line">                                       self.id]</span><br><span class="line">            f.write(json.dumps(profiles))</span><br><span class="line"></span><br><span class="line">    def verify_password(self, password):</span><br><span class="line">        password_hash = self.get_password_hash()</span><br><span class="line">        if password_hash is None:</span><br><span class="line">            return False</span><br><span class="line">        return check_password_hash(self.password_hash, password)</span><br><span class="line"></span><br><span class="line">    def get_password_hash(self):</span><br><span class="line">        &quot;&quot;&quot;try to get password hash from file.</span><br><span class="line"></span><br><span class="line">        :return password_hash: if the there is corresponding user in</span><br><span class="line">                the file, return password hash.</span><br><span class="line">                None: if there is no corresponding user, return None.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        try:</span><br><span class="line">            with open(PROFILE_FILE) as f:</span><br><span class="line">                user_profiles = json.load(f)</span><br><span class="line">                user_info = user_profiles.get(self.username, None)</span><br><span class="line">                if user_info is not None:</span><br><span class="line">                    return user_info[0]</span><br><span class="line">        except IOError:</span><br><span class="line">            return None</span><br><span class="line">        except ValueError:</span><br><span class="line">            return None</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    def get_id(self):</span><br><span class="line">        &quot;&quot;&quot;get user id from profile file, if not exist, it will</span><br><span class="line">        generate a uuid for the user.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if self.username is not None:</span><br><span class="line">            try:</span><br><span class="line">                with open(PROFILE_FILE) as f:</span><br><span class="line">                    user_profiles = json.load(f)</span><br><span class="line">                    if self.username in user_profiles:</span><br><span class="line">                        return user_profiles[self.username][1]</span><br><span class="line">            except IOError:</span><br><span class="line">                pass</span><br><span class="line">            except ValueError:</span><br><span class="line">                pass</span><br><span class="line">        return unicode(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def get(user_id):</span><br><span class="line">        &quot;&quot;&quot;try to return user_id corresponding User object.</span><br><span class="line">        This method is used by load_user callback function</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not user_id:</span><br><span class="line">            return None</span><br><span class="line">        try:</span><br><span class="line">            with open(PROFILE_FILE) as f:</span><br><span class="line">                user_profiles = json.load(f)</span><br><span class="line">                for user_name, profile in user_profiles.iteritems():</span><br><span class="line">                    if profile[1] == user_id:</span><br><span class="line">                        return User(user_name)</span><br><span class="line">        except:</span><br><span class="line">            return None</span><br><span class="line">        return None</span><br></pre></td></tr></table></figure></p><ul><li>User类需要继承flask-login中的UserMixin类，用于实现相应的用户会话管理。</li><li>这里我们是直接存储用户信息到一个json文件”profiles.json”</li><li>我们并不直接存储密码，而是存储加密后的hash值，在这里我们使用了werkzeug.security包中的generate_password_hash函数来进行加密，由于此函数默认使用了sha1算法，并添加了长度为8的盐值，所以还是相当安全的。一般用途的话也就够用了。</li><li>验证password的时候，我们需要使用werkzeug.security包中的check_password_hash函数来验证密码</li><li>get_id是UserMixin类中就有的method，在这我们需要overwrite这个method。在json文件中没有对应的user id时，可以使用uuid.uuid4()生成一个用户唯一id</li></ul><p>至此，我们就实现了第二步和第五步，接下来要看第三步，如何去维护一个session</p><h4 id="维护用户session"><a href="#维护用户session" class="headerlink" title="维护用户session"></a>维护用户session</h4><p>先看下代码，这里把相应代码也放入到app.py当中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from forms import LoginForm</span><br><span class="line">from flask_wtf.csrf import CsrfProtect</span><br><span class="line">from model import User</span><br><span class="line">from flask_login import login_user, login_required</span><br><span class="line">from flask_login import LoginManager, current_user</span><br><span class="line">from flask_login import logout_user</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = os.urandom(24)</span><br><span class="line"></span><br><span class="line"># use login manager to manage session</span><br><span class="line">login_manager = LoginManager()</span><br><span class="line">login_manager.session_protection = &apos;strong&apos;</span><br><span class="line">login_manager.login_view = &apos;login&apos;</span><br><span class="line">login_manager.init_app(app=app)</span><br><span class="line"></span><br><span class="line"># 这个callback函数用于reload User object，根据session中存储的user id</span><br><span class="line">@login_manager.user_loader</span><br><span class="line">def load_user(user_id):</span><br><span class="line">    return User.get(user_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># csrf protection</span><br><span class="line">csrf = CsrfProtect()</span><br><span class="line">csrf.init_app(app)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;)</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        user_name = request.form.get(&apos;username&apos;, None)</span><br><span class="line">        password = request.form.get(&apos;password&apos;, None)</span><br><span class="line">        remember_me = request.form.get(&apos;remember_me&apos;, False)</span><br><span class="line">        user = User(user_name)</span><br><span class="line">        if user.verify_password(password):</span><br><span class="line">            login_user(user, remember=remember_me)</span><br><span class="line">            return redirect(request.args.get(&apos;next&apos;) or url_for(&apos;main&apos;))</span><br><span class="line">    return render_template(&apos;login.html&apos;, title=&quot;Sign In&quot;, form=form)</span><br></pre></td></tr></table></figure></p><ul><li>维护用户的会话，关键就在这个LoginManager对象。</li><li>必须实现这个load_user callback函数，用以reload user object</li><li>当密码验证通过后，使用login_user()函数来登录用户，这时用户在会话中的状态就是登录状态了</li></ul><h4 id="受保护网页"><a href="#受保护网页" class="headerlink" title="受保护网页"></a>受保护网页</h4><p>保护特定网页，只需要对特定路由加一个装饰器就可以，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># app.py</span><br><span class="line"></span><br><span class="line"># ...</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">@app.route(&apos;/main&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def main():</span><br><span class="line">    return render_template(</span><br><span class="line">        &apos;main.html&apos;, username=current_user.username)</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure></p><ul><li>current_user保存的就是当前用户的信息，实质上是一个User对象，所以我们直接调用其属性, 例如这里我们要给模板传一个username的参数，就可以直接用current_user.username</li><li>使用@login_required来标识改路由需要登录用户，非登录用户会被重定向到’/login’路由(这个就是由login_manager.login_view = ‘login’ 语句来指定的)</li></ul><h4 id="用户登出"><a href="#用户登出" class="headerlink" title="用户登出"></a>用户登出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># app.py</span><br><span class="line"></span><br><span class="line"># ...</span><br><span class="line">@app.route(&apos;/logout&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def logout():</span><br><span class="line">    logout_user()</span><br><span class="line">    return redirect(url_for(&apos;login&apos;))</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>至此，我们就实现了一个完整的登陆和登出的过程。</p><p>另外我们可能还需要其它辅助的功能，诸如发送确认邮件，密码重置，权限分级管理等，这些功能都可以通过flask及其插件来完成，这个大家可以自己探索下啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 使用Flask实现用户登陆认证的详细过程&lt;br&gt;date: 2016-12-06 11:57:18&lt;br&gt;layout: page&lt;br&gt;comments: true&lt;/p&gt;
&lt;h3 id=&quot;用户认证的原理&quot;&gt;&lt;a href=&quot;#用户认证的原理&quot; class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/08/12/flask_restful_api/"/>
    <id>http://yoursite.com/2018/08/12/flask_restful_api/</id>
    <published>2018-08-12T05:31:11.729Z</published>
    <updated>2018-08-12T05:31:11.729Z</updated>
    
    <content type="html"><![CDATA[<p>title: Flask Restful API权限管理设计与实现<br>date: 2017-08-10 16:21:18<br>layout: page<br>comments: true</p><p>在使用flask设计restful api的时候，有一个很重要的问题就是如何进行权限管理，以及如何进行角色的定义，在网上找了一下没有发现有类似的资料，虽然有些针对网站进行的权限管理设计，但是跟restful api接口的权限管理还是有很多不同的，于是乎自己动手，丰衣足食。为方便后来者，特撰此文！</p><h2 id="权限的设计"><a href="#权限的设计" class="headerlink" title="权限的设计"></a>权限的设计</h2><p>从本质上思考，我需要为每个API接口设定相应的权限，所以针对API的权限列表跟普通网站的权限设计是不同的，普通网站的权限设计是针对某个功能，比如是否可以comment功能，通常的权限定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Permission:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    COMMENT = 0x01  # 评论</span><br><span class="line">    MODERATE_COMMENT = 0x02  # 移除评论</span><br></pre></td></tr></table></figure></p><p>但是针对restful api，我们更希望权限是针对我们的api接口，而restful api接口是跟我们路由的endpoint以及http method相关的，所以我们的权限设计应该是类似如下示例中的样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里comments是路由的endpoint，接口在判断用户是否有权限的时候</span><br><span class="line"># 可以先获取到endpoint和http method，然后就可以查看其是否有权限</span><br><span class="line">comment_permission = &#123;&quot;comments&quot;: &#123;&quot;post&quot;: True, &quot;get&quot;: True, &quot;delete&quot;: False&#125;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="角色的设计"><a href="#角色的设计" class="headerlink" title="角色的设计"></a>角色的设计</h2><p>通常，我们在做网站的角色设计时会将角色存储在数据库当中，并会通过或运算(|)赋予角色以特定权限，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Role(db.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户角色</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    # 该用户角色名称</span><br><span class="line">    name = db.Column(db.String(164))</span><br><span class="line">    # 该用户角色是否为默认</span><br><span class="line">    default = db.Column(db.Boolean, default=False, index=True)</span><br><span class="line">    # 该用户角色对应的权限</span><br><span class="line">    permissions = db.Column(db.Integer)</span><br><span class="line">    # 该用户角色和用户的关系</span><br><span class="line">    # 角色为该用户角色的所有用户</span><br><span class="line">    users = db.relationship(&apos;User&apos;, backref=&apos;role&apos;, lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def insert_roles():</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        创建用户角色</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        roles = &#123;</span><br><span class="line">            # 定义了两个用户角色(User, Admin)</span><br><span class="line">            &apos;User&apos;: (Permission.COMMENT, True),</span><br><span class="line">            &apos;Admin&apos;: (Permission.COMMENT |</span><br><span class="line">                      Permission.MODERATE_COMMENT, False)</span><br><span class="line">        &#125;</span><br><span class="line">        for r in roles:</span><br><span class="line">            role = Role.query.filter_by(name=r).first()</span><br><span class="line">            if role is None:</span><br><span class="line">                # 如果用户角色没有创建: 创建用户角色</span><br><span class="line">                role = Role(name=r)</span><br><span class="line">            role.permissions = roles[r][0]</span><br><span class="line">            role.default = roles[r][1]</span><br><span class="line">            db.session.add(role)</span><br><span class="line">            db.session.commit()</span><br></pre></td></tr></table></figure></p><p>这里其实我一直没有搞明白，为什么要将角色存储于数据库当中，在我看来这只会导致更多的I/O操作从而影响系统的性能，因此我在设计角色的时候根本没有考虑存储到数据库中，角色的数据结构在系统运行时，直接存在内存当中，这样在接口调用时，可以直接使用角色相关的数据结构。而且由于我们的权限设计也不太相同，所以我针对restful api设计的Role如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">USER = 1</span><br><span class="line">ADMIN = 2</span><br><span class="line">VISITOR = 3</span><br><span class="line"></span><br><span class="line">Role = &#123;</span><br><span class="line">    USER: &#123;</span><br><span class="line">        &quot;comment&quot;: &#123;&quot;post&quot;: True, &quot;patch&quot;: True, &quot;get&quot;: True, &quot;delete&quot;: True&#125;,</span><br><span class="line">        &quot;share&quot;: &#123;&quot;post&quot;: True&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ADMIN: &#123;</span><br><span class="line">        &quot;comment&quot;: &#123;&quot;post&quot;: True, &quot;patch&quot;: True, &quot;get&quot;: True, &quot;delete&quot;: True&#125;,</span><br><span class="line">        &quot;share&quot;: &#123;&quot;post&quot;: True&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    VISITOR: &#123;</span><br><span class="line">        &quot;comment&quot;: &#123;&quot;get&quot;: True&#125;,</span><br><span class="line">        &quot;share&quot;: &#123;&quot;post&quot;: True&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户可以被赋予特定的role，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userA = &#123;&quot;name&quot;: &quot;John&quot;, &quot;role&quot;: USER&#125;</span><br></pre></td></tr></table></figure></p><p>那么接口如何判断用户是否有权限访问呢？<br>首先用户访问接口时都会带有用户信息，restful api一般是通过token来表明身份，系统通过token来获取用户的信息，比如用户名，然后我们可以通过用户名来获取用户的角色role，假设我们访问的接口是comments endpoint的post接口，那么就可以如下判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def access_control(user):</span><br><span class="line">    &quot;&quot;&quot;判断用户是否有访问权限，有就返回True，没有返回False&quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    # 首先要获取到API的endpoint和http method，此处代码省略</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    role = user.get(&apos;role&apos;, VISITOR)</span><br><span class="line">    try:</span><br><span class="line">        if not Role[role][endpoint][http_method]:</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line">    except KeyError:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure></p><p>由于基本所有的接口都需要access control，那么我们把上边的代码稍作改变，让它成为一个decorator，同时，user信息也可以直接获取而不需要从参数传递，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def get_role():</span><br><span class="line">    # 这里get_resource_by_name用于从数据库中获取该用户的信息，这个需要自己去定义</span><br><span class="line">    # 另外我们可以在登录验证的时候或者token验证的时候讲user name存储于全局变量g中，这样我们可以随时获取该用户名</span><br><span class="line">    user = UserModel.get_resource_by_name(g.user_name)</span><br><span class="line">    return user.get(&quot;role&quot;, VISITOR)</span><br><span class="line"></span><br><span class="line">def access_control(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrap_func(*args, **kwargs):</span><br><span class="line">        # 同样要先获取到API的endpoint和http method，此处代码省略</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        try:</span><br><span class="line">            if not Role[role][endpoint][http_method]:</span><br><span class="line">                return make_response(</span><br><span class="line">                    jsonify(&#123;&apos;error&apos;: &apos;no permission&apos;&#125;), 403)</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        except KeyError:</span><br><span class="line">            return make_response(</span><br><span class="line">                jsonify(&#123;&apos;error&apos;: &apos;no permission&apos;&#125;), 403)</span><br><span class="line">    return wrap_func</span><br></pre></td></tr></table></figure></p><p>以下是一个获取图片resource的使用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from flask_restful import Resource</span><br><span class="line"></span><br><span class="line">class ImageResource(Resource):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ImageResource, self).__init__()</span><br><span class="line"></span><br><span class="line">    @token_auth.login_required</span><br><span class="line">    @access_control</span><br><span class="line">    def get(self, resource_id):</span><br><span class="line">        response = resource_get(resource_id)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure></p><p>这里另外一个decortor @token_auth.login_required用于token验证，大家可以先不用理会。到这里我们已经可以针对每个接口自动判断该用户是否有权限访问了，而所有权限的变化，都可以通过修改Role中的权限来进行更改，而不需要更改原来的代码，很爽吧，有木有？<br>不过，笔者在项目中还遇到了另外一个问题，有时候针对一个接口所有的user都应该有权限，但是针对特定的resource，只能resource owner可以操作，举个栗子，比如我们要删除某个评论，但是只允许发布评论的人才有权限删除，也就是comment resource的owner才可以使用delete接口删除，但是我们所有的用户在Role定义的时候delete接口都是True，这个怎么办呢？<br>这就需要我们在access_control检测完了之后再进一步检测该用户是否是resource owner，所以我们就需要进一步检测，这里添加一个decorator如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def get_resource_owner():</span><br><span class="line">    &quot;&quot;&quot;获取resource的owner&quot;&quot;&quot;</span><br><span class="line">    # 自定义，代码省略</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">def owner_permission_required(func):</span><br><span class="line">    @wrap(func)</span><br><span class="line">    def wrap_func(*args, **kwargs):</span><br><span class="line">        if g.user_name == get_resource_owner():</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line">        return make_response(</span><br><span class="line">            jsonify(&#123;&apos;error&apos;: &apos;no permission&apos;&#125;), 403)</span><br><span class="line">    return wrap_func</span><br></pre></td></tr></table></figure></p><p>使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from flask_restful import Resource</span><br><span class="line"></span><br><span class="line">class CommentResource(Resource):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(CommentResource, self).__init__()</span><br><span class="line"></span><br><span class="line">    @token_auth.login_required</span><br><span class="line">    @access_control</span><br><span class="line">    @owner_permission_required</span><br><span class="line">    @marshal_with(image_fields)</span><br><span class="line">    def delete(self, resource_id):</span><br><span class="line">        response = resource_delete(resource_id)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure></p><p>注意：decorator的顺序是不能改变的。</p><p>至此，Restful API权限管理相关的设计就完成了，如果文章给你带来了启发，记得点赞哦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: Flask Restful API权限管理设计与实现&lt;br&gt;date: 2017-08-10 16:21:18&lt;br&gt;layout: page&lt;br&gt;comments: true&lt;/p&gt;
&lt;p&gt;在使用flask设计restful api的时候，有一个很重要的问
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>史上最详解Python日期和时间处理（上）</title>
    <link href="http://yoursite.com/2018/08/12/python_time/"/>
    <id>http://yoursite.com/2018/08/12/python_time/</id>
    <published>2018-08-12T03:52:56.000Z</published>
    <updated>2018-08-12T03:55:08.092Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，我承认这有标题党的嫌疑，不过看了那么多文章，的确没有找到一篇让我满意的关于日期和时间处理的详解文章，于是决心自己动手亲写一篇，希望能对得起这个霸气的标题。言归正传，在Python编程中，日期和时间处理是非常繁琐的一块，不仅概念众多，且有很多不同的module, 尤其涉及时区处理的时候会将问题进一步复杂化。本文将对Python在日期和时间处理上进行一步步详细讲解，总共会分为上下两篇，其中时区处理是较为棘手的一块内容，单独拿出来作为下篇。此上篇将主要讲解时间和日期处理中的基本概念，和常用的场景。<br><a id="more"></a><br>本篇目录如下：</p><ul><li><a href="#时间和日期的表示">时间和日期的表示</a><ul><li><a href="#时间、日期对象">时间、日期对象</a></li><li><a href="#时间戳">时间戳</a></li><li><a href="#日期时间字符串">日期时间字符串</a></li></ul></li><li><a href="#日期时间处理场景">日期时间处理场景</a><ul><li><a href="#获取当前时间">获取当前时间</a></li><li><a href="#获取特定时间">获取特定时间</a></li><li><a href="#不同时间表示的转化">不同时间表示的转化</a></li></ul></li></ul><h2 id="时间和日期的表示"><a href="#时间和日期的表示" class="headerlink" title="时间和日期的表示"></a>时间和日期的表示</h2><p>在Python中表示日期和时间，最基本的有三种形式：</p><ul><li>时间、日期对象(Object)</li><li>时间戳(Timestamp)</li><li>字符串(String)</li></ul><p>在这三种基本形式中又会衍生出一些其它的概念，下面来分别讲解下：</p><p>先看张脑图来理清它们之间的关系<br><img src="https://upload-images.jianshu.io/upload_images/3959253-06d2eac8083f8c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.1-python日期与时间的表示"></p><h4 id="时间、日期对象"><a href="#时间、日期对象" class="headerlink" title="时间、日期对象"></a>时间、日期对象</h4><p>Python中用于表示日期和时间的对象有很多种，在详细讲解这些对象之前先要明确一个概念，<strong>即这些对象都分为两种：一种是”原始的(naive)”，另一种是”有知的(aware)”</strong>。区别在于原始的时间没有时区概念，只是单纯的表示一个日期和时间，而有知的时间会包含一些额外信息，如时区，是否夏令时等信息，而这些信息会通过tzinfo子类来进行封装，我们将在（下）中详细讲解。</p><ul><li><p>datetime对象：这个是最常用的日期时间对象，可以即表示日期又表示时间。datetime对象可以直接用于日期和时间相关的计算（比如计算5天之前的时间）。另外，datetime既可以表示原始时间，也可以表示有知时间，如果要表示有知时间，则在初始化时需要传递tzinfo类型的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [16]: import datetime</span><br><span class="line"></span><br><span class="line">In [17]: datetime.datetime.now() # 返回一个datetime对象</span><br><span class="line">Out[17]: datetime.datetime(2018, 7, 28, 11, 17, 38, 972555)</span><br><span class="line"></span><br><span class="line"># 也可以直接初始化一个datetime对象</span><br><span class="line">In [20]: datetime.datetime(2018, 7, 5, 10, 20)</span><br><span class="line">Out[20]: datetime.datetime(2018, 7, 5, 10, 20)</span><br></pre></td></tr></table></figure></li><li><p>time对象：与datetime类似，但只用于表示时间，不表示日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里初始化一个datetime.time对象用于表示时间11点28分05秒</span><br><span class="line">In [19]: datetime.time(11, 28, 5)</span><br><span class="line">Out[19]: datetime.time(11, 28, 5)</span><br></pre></td></tr></table></figure></li><li><p>date对象：与datetime类似，但只表示日期，不表示时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [23]: datetime.date(2018, 07, 10)</span><br><span class="line">Out[23]: datetime.date(2018, 7, 10)</span><br></pre></td></tr></table></figure></li><li><p>time tuple: time tuple又叫struct time，是一种用于表示日期和时间的数据结构，此数据结构主要用于time module中的相关函数。time tuple中有9个元素，如下表所示：</p><p>索引（Index）|    属性（Attribute）|    值（Values）<br>—|—-|—-<br>0    | tm_year（年）|     比如2011<br>1    | tm_mon（月）|     1 - 12<br>2    | tm_mday（日）|     1 - 31<br>3    | tm_hour（时）|     0 - 23<br>4    | tm_min（分）|     0 - 59<br>5    | tm_sec（秒）|     0 - 61<br>6    | tm_wday（weekday）|     0 - 6（0表示周日）<br>7    | tm_yday（一年中的第几天）|     1 - 366<br>8    | tm_isdst（是否是夏令时）    | 默认为-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [21]: import time</span><br><span class="line"></span><br><span class="line">In [22]: time.localtime()  # 返回一个time tuple用于表示当前时间的local time</span><br><span class="line">Out[22]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=11,   tm_min=26, tm_sec=19, tm_wday=5, tm_yday=209, tm_isdst=0)</span><br></pre></td></tr></table></figure></li></ul><p>总结：以上前三个对象(datetime, date, time)均来自datetime module（注意区分datetime module和datetime 对象），而最后一个time tuple主要用于time module中的相关操作。</p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>时间戳(Timestamp)是表示当前时间距离元年时间(epoch, 1970年1月1日00:00:00 UTC)的偏移量，这个偏移量在Python中用秒数来计算，但有些编程语言如JavaScript是用毫秒来计算的，需要注意。<strong>另外需要知道时间戳没有时区概念，是不分时区的。</strong>这就是为什么我们在数据库中通常存储的是时间戳，当需要向用户显示时间的时候，再转化为对应时区的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 获取当前时间的时间戳</span><br><span class="line">In [24]: time.time()</span><br><span class="line">Out[24]: 1532750668.210267</span><br></pre></td></tr></table></figure><h4 id="日期时间字符串"><a href="#日期时间字符串" class="headerlink" title="日期时间字符串"></a>日期时间字符串</h4><p>通常在需要向用户展示时间的时候，我们都需要将时间戳或者时间对象转化为字符串形式，从而在标准输出中能够打印出相应的时间。我们可以通过将时间戳或者对象进行转化和格式化来得到相应的字符串。需要说明的是，字符串表示时间有一个标准形式称为<a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener">ISO8601</a>，可以通过专门的函数来获得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [29]: dt = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"># 获取ISO8601标准时间字符串</span><br><span class="line">In [30]: dt.isoformat()</span><br><span class="line">Out[30]: &apos;2018-07-28T12:11:33.582380&apos;</span><br><span class="line"></span><br><span class="line"># 自定义格式的时间字符串</span><br><span class="line">In [31]: dt.strftime(&quot;%Y%m%d-%H:%M:%S&quot;)</span><br><span class="line">Out[31]: &apos;20180728-12:11:33&apos;</span><br></pre></td></tr></table></figure><h2 id="日期时间处理场景"><a href="#日期时间处理场景" class="headerlink" title="日期时间处理场景"></a>日期时间处理场景</h2><p>时间处理主要有以下几个场景：</p><ul><li>获取当前时间</li><li>获取特定时间：例如获取5天前的时间。</li><li>不同时间表示的转化：例如将datetime对象转化为时间字符串</li><li>时区处理：这个将在《下篇》中详细讲述</li></ul><p>下面分别介绍下这几种处理场景：</p><h4 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h4><p>获取当前时间可以通过获取datetime对象、时间戳或time tuple三种方式来获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 最常用的获取当前日期时间的方法，其有一个tz参数用于设置时区，默认为None，所以最终获取的是一个原始naive时间</span><br><span class="line">In [36]: dt = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"># 注意获取的是当地时间的时间表示，但其本身是一个原始naive时间</span><br><span class="line">In [37]: dt</span><br><span class="line">Out[37]: datetime.datetime(2018, 7, 28, 12, 58, 57, 676468)</span><br><span class="line"></span><br><span class="line"># 获取当前时间的UTC时间表示，注意这仍然是一个原始naive时间，也就是用当前的UTC时间4点59分32秒来构造一个naive时间对象，但这个对象并没有包含时区信息</span><br><span class="line">In [38]: utc_now = datetime.datetime.utcnow()</span><br><span class="line"></span><br><span class="line">In [39]: utc_now</span><br><span class="line">Out[39]: datetime.datetime(2018, 7, 28, 4, 59, 32, 258087)</span><br><span class="line"></span><br><span class="line"># 获取当前时间的时间戳</span><br><span class="line">In [40]: time.time()</span><br><span class="line">Out[40]: 1532753948.563503</span><br><span class="line"></span><br><span class="line"># 获取当地时间的time tuple</span><br><span class="line">In [41]: time.localtime()</span><br><span class="line">Out[41]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=13, tm_min=0, tm_sec=2, tm_wday=5, tm_yday=209, tm_isdst=0)</span><br></pre></td></tr></table></figure><h4 id="获取特定时间"><a href="#获取特定时间" class="headerlink" title="获取特定时间"></a>获取特定时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [42]: dt</span><br><span class="line">Out[42]: datetime.datetime(2018, 7, 28, 12, 58, 57, 676468)</span><br><span class="line"></span><br><span class="line"># 获取两天前的时间</span><br><span class="line">In [43]: dt - datetime.timedelta(days=2)</span><br><span class="line">Out[43]: datetime.datetime(2018, 7, 26, 12, 58, 57, 676468)</span><br><span class="line"></span><br><span class="line"># 获取一周前的时间</span><br><span class="line">In [44]: dt - datetime.timedelta(weeks=1)</span><br><span class="line">Out[44]: datetime.datetime(2018, 7, 21, 12, 58, 57, 676468)</span><br><span class="line"></span><br><span class="line"># 获取3小时前的时间</span><br><span class="line">In [45]: dt - datetime.timedelta(hours=3)</span><br><span class="line">Out[45]: datetime.datetime(2018, 7, 28, 9, 58, 57, 676468)</span><br></pre></td></tr></table></figure><p>通过timedelta基本可以满足我们获取特定时间的需求，但是这里不涉及时区相关的转化。而且只是原始naive时间之间的转化</p><h4 id="不同时间表示的转化"><a href="#不同时间表示的转化" class="headerlink" title="不同时间表示的转化"></a>不同时间表示的转化</h4><p>先来看一张关系图：<br><img src="https://upload-images.jianshu.io/upload_images/3959253-837fe6ec315f069e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.2-不同时间表示的关系图"></p><p>从上图可以看出总共有5对关系，每对关系都是可以双向转化的(除timetuple无法直接转化为datetime，需要先转化为timestamp或者time string)，所以总共有9种转化，下面将分别介绍下它们之间是如何互相转化的。</p><h5 id="datetime-object-amp-timestamp"><a href="#datetime-object-amp-timestamp" class="headerlink" title="datetime object &amp; timestamp"></a>datetime object &amp; timestamp</h5><p>从时间戳timestamp ==&gt; datetime object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [2]: import time</span><br><span class="line"></span><br><span class="line">In [3]: from datetime import datetime</span><br><span class="line"></span><br><span class="line">In [4]: ts = time.time()</span><br><span class="line"></span><br><span class="line"># 直接通过fromtimestamp就可以获得时间戳对应的datetime对象</span><br><span class="line">In [5]: dt = datetime.fromtimestamp(ts)</span><br><span class="line"></span><br><span class="line">In [6]: ts</span><br><span class="line">Out[6]: 1532775234.192805</span><br><span class="line"></span><br><span class="line"># 注意这个datetime对象获取的是本地时间的表示，但是仍然是原始naive time</span><br><span class="line">In [7]: dt</span><br><span class="line">Out[7]: datetime.datetime(2018, 7, 28, 18, 53, 54, 192805)</span><br><span class="line"></span><br><span class="line"># 获取对应utc的时间表示，仍然是原始naive时间</span><br><span class="line">In [11]: utc_dt = datetime.utcfromtimestamp(ts)</span><br><span class="line">In [12]: utc_dt</span><br><span class="line">Out[12]: datetime.datetime(2018, 7, 28, 10, 53, 54, 192805)</span><br></pre></td></tr></table></figure></p><p>从datetime object ==&gt;时间戳timestamp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数用于返回datetime object对应的时间戳</span><br><span class="line">In [8]: def get_timestamp(datetime_obj):</span><br><span class="line">   ...:     if not isinstance(datetime_obj, datetime):</span><br><span class="line">   ...:         raise ValueError()</span><br><span class="line">   ...:     return (datetime_obj - datetime(1970, 1, 1)).total_seconds()</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [9]: get_timestamp(dt)</span><br><span class="line">Out[9]: 1532804034.192805</span><br><span class="line"></span><br><span class="line"># 也可以先转化为time tuple，再通过mktime函数转化为timestamp，但是精度不如上一版高</span><br><span class="line">In [13]: def get_timestamp_v2(datetime_obj):</span><br><span class="line">    ...:     if not isinstance(datetime_obj, datetime):</span><br><span class="line">    ...:         raise ValueError()</span><br><span class="line">    ...:     return time.mktime(datetime_obj.timetuple())</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [14]: get_timestamp_v2(dt)</span><br><span class="line">Out[14]: 1532775234.0</span><br></pre></td></tr></table></figure></p><h5 id="datetime-object-amp-time-string"><a href="#datetime-object-amp-time-string" class="headerlink" title="datetime object &amp; time string"></a>datetime object &amp; time string</h5><p>datetime object ==&gt; time string<br>关于格式化的说明可以参考<a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" target="_blank" rel="noopener">官网文档</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [15]: dt</span><br><span class="line">Out[15]: datetime.datetime(2018, 7, 28, 18, 53, 54, 192805)</span><br><span class="line"></span><br><span class="line"># 自定义格式</span><br><span class="line">In [16]: dt.strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;)</span><br><span class="line">Out[16]: &apos;2018-07-28T18:53:54&apos;</span><br><span class="line"></span><br><span class="line"># 转化为ISO8601格式字符串的快捷方式</span><br><span class="line">In [17]: dt.isoformat()</span><br><span class="line">Out[17]: &apos;2018-07-28T18:53:54.192805&apos;</span><br></pre></td></tr></table></figure></p><p>time string ==&gt; datetime object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [18]: time_str = &apos;2018-07-28T18:53:54&apos;</span><br><span class="line"></span><br><span class="line">In [19]: dt2 = datetime.strptime(time_str, &quot;%Y-%m-%dT%H:%M:%S&quot;)</span><br><span class="line"></span><br><span class="line">In [20]: dt2</span><br><span class="line">Out[20]: datetime.datetime(2018, 7, 28, 18, 53, 54)</span><br></pre></td></tr></table></figure></p><h5 id="datetime-object-amp-time-tuple"><a href="#datetime-object-amp-time-tuple" class="headerlink" title="datetime object &amp; time tuple"></a>datetime object &amp; time tuple</h5><p>datetime object ==&gt; time tuple<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [21]: dt.timetuple()</span><br><span class="line">Out[21]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=18, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=-1)</span><br></pre></td></tr></table></figure></p><p>time tuple ==&gt; datetime object<br>无法直接转化，需要先转化为time str或者timestamp</p><h5 id="time-tuple-amp-timestamp"><a href="#time-tuple-amp-timestamp" class="headerlink" title="time tuple &amp; timestamp"></a>time tuple &amp; timestamp</h5><p>time tuple ==&gt; timestamp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [25]: time_tuple</span><br><span class="line">Out[25]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=18, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=-1)</span><br><span class="line"></span><br><span class="line"># 注意：该函数精度只能到秒</span><br><span class="line">In [26]: ts = time.mktime(time_tuple)</span><br><span class="line"></span><br><span class="line">In [27]: ts</span><br><span class="line">Out[27]: 1532775234.0</span><br></pre></td></tr></table></figure></p><p>timestamp ==&gt; time tuple<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [27]: ts</span><br><span class="line">Out[27]: 1532775234.0</span><br><span class="line"></span><br><span class="line"># 转为本地时间的time tuple表示，</span><br><span class="line">In [29]: tt = time.localtime(ts)</span><br><span class="line"></span><br><span class="line">In [30]: tt</span><br><span class="line">Out[30]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=18, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=0)</span><br><span class="line"></span><br><span class="line"># 转为UTC时间的time tuple表示</span><br><span class="line">In [31]: utc_tt = time.gmtime(ts)</span><br><span class="line"></span><br><span class="line">In [32]: utc_tt</span><br><span class="line">Out[32]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=10, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=0)</span><br></pre></td></tr></table></figure></p><h5 id="time-tuple-amp-time-string"><a href="#time-tuple-amp-time-string" class="headerlink" title="time tuple &amp; time string"></a>time tuple &amp; time string</h5><p>time tuple ==&gt; time string<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [33]: tt</span><br><span class="line">Out[33]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=18, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=0)</span><br><span class="line"></span><br><span class="line"># 注意：这里strftime并非time tuple的方法，而是time module下的函数</span><br><span class="line">In [34]: tt.strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-34-1be0f512fc77&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 tt.strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;)</span><br><span class="line"></span><br><span class="line">AttributeError: &apos;time.struct_time&apos; object has no attribute &apos;strftime&apos;</span><br><span class="line"></span><br><span class="line"># 如下是正解</span><br><span class="line">In [35]: time.strftime(&quot;%Y-%m-%dT%H:%M:%S&quot;, tt)</span><br><span class="line">Out[35]: &apos;2018-07-28T18:53:54&apos;</span><br></pre></td></tr></table></figure></p><p>time string ==&gt; time tuple<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [36]: time_str</span><br><span class="line">Out[36]: &apos;2018-07-28T18:53:54&apos;</span><br><span class="line"></span><br><span class="line">In [37]: tt = time.strptime(time_str, &quot;%Y-%m-%dT%H:%M:%S&quot;)</span><br><span class="line"></span><br><span class="line">In [38]: tt</span><br><span class="line">Out[38]: time.struct_time(tm_year=2018, tm_mon=7, tm_mday=28, tm_hour=18, tm_min=53, tm_sec=54, tm_wday=5, tm_yday=209, tm_isdst=-1)</span><br></pre></td></tr></table></figure></p><h5 id="timestamp-amp-time-string"><a href="#timestamp-amp-time-string" class="headerlink" title="timestamp &amp; time string"></a>timestamp &amp; time string</h5><p>无法相互转化，只能通过先转化为datetime object或者time tuple之后才能再转化</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.python.org/2/library/time.html" target="_blank" rel="noopener">time module document</a></li><li><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="noopener">datetime module document</a></li><li><a href="https://medium.com/@eleroy/10-things-you-need-to-know-about-date-and-time-in-python-with-datetime-pytz-dateutil-timedelta-309bfbafb3f7" target="_blank" rel="noopener">10 things you need to know about Date and Time in Python</a></li><li><a href="http://www.wklken.me/posts/2015/03/03/python-base-datetime.html" target="_blank" rel="noopener">PYTHON-基础-时间日期处理小结</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，我承认这有标题党的嫌疑，不过看了那么多文章，的确没有找到一篇让我满意的关于日期和时间处理的详解文章，于是决心自己动手亲写一篇，希望能对得起这个霸气的标题。言归正传，在Python编程中，日期和时间处理是非常繁琐的一块，不仅概念众多，且有很多不同的module, 尤其涉及时区处理的时候会将问题进一步复杂化。本文将对Python在日期和时间处理上进行一步步详细讲解，总共会分为上下两篇，其中时区处理是较为棘手的一块内容，单独拿出来作为下篇。此上篇将主要讲解时间和日期处理中的基本概念，和常用的场景。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flask-Login详解</title>
    <link href="http://yoursite.com/2017/10/12/Flask-Login/"/>
    <id>http://yoursite.com/2017/10/12/Flask-Login/</id>
    <published>2017-10-12T10:18:18.000Z</published>
    <updated>2018-08-12T05:33:31.486Z</updated>
    
    <content type="html"><![CDATA[<p>关于Flask登录认证的详细过程请参见拙作<a href="http://www.jianshu.com/p/06bd93e21945" target="_blank" rel="noopener">&lt;&lt;使用Flask实现用户登陆认证的详细过程&gt;&gt;</a>一文，而本文则偏重于详细介绍Flask-Login的原理，代码的解析。</p><h3 id="首次登陆"><a href="#首次登陆" class="headerlink" title="首次登陆"></a>首次登陆</h3><p>我们首先来看一下首次登录验证的流程图：</p><p><img src="http://upload-images.jianshu.io/upload_images/3959253-b34989af4a0d0b2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首次登陆"></p><p>Flask-Login在登录过程中主要负责：</p><ul><li>将用户对象存入request context中</li><li>将用户ID，Session ID等信息存入Session中<br>在<a href="http://www.jianshu.com/p/06bd93e21945" target="_blank" rel="noopener">&lt;&lt;使用Flask实现用户登陆认证的详细过程&gt;&gt;</a>中我们已经介绍过如何通过Flask-Login来实现登录的过程，其中最重要的代码就是login_user，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login_user(user, remember=remember_me)</span><br></pre></td></tr></table></figure></li></ul><p>那么login_user具体做了什么呢？我们来看下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def login_user(user, remember=False, force=False, fresh=True):</span><br><span class="line">    if not force and not user.is_active:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    user_id = getattr(user, current_app.login_manager.id_attribute)()</span><br><span class="line">    session[&apos;user_id&apos;] = user_id</span><br><span class="line">    session[&apos;_fresh&apos;] = fresh</span><br><span class="line">    session[&apos;_id&apos;] = current_app.login_manager._session_identifier_generator()</span><br><span class="line"></span><br><span class="line">    if remember:</span><br><span class="line">        session[&apos;remember&apos;] = &apos;set&apos;</span><br><span class="line"></span><br><span class="line">    _request_ctx_stack.top.user = user</span><br><span class="line">    user_logged_in.send(current_app._get_current_object(), user=_get_user())</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure></p><ul><li><code>getattr(user, current_app.login_manager.id_attribute)()</code> 这里<code>login_manager.id_attribute</code>是一个字符串<code>&#39;get_id&#39;</code>。因此这句的意思是获取User对象的get_id method，然后执行，从而获取到用户的ID</li><li><p>通过<code>session[&#39;user_id&#39;] = user_id</code>来将用户的ID存储进Session当中，后面紧跟着将fresh信息，session id信息，remember信息存储进session。</p><blockquote><p>注意：Flask的session是以cookie为基础，但是是在Server端使用secret key并使用AES之类的对称加密算法进行加密的，然后将加密后的cookie发送给客户端。由于是加密后的数据，客户端无法篡改数据，也无法获知session中的信息，只能保存该session信息，在之后的请求中携带该session信息</p></blockquote></li><li><p><code>_request_ctx_stack.top.user = user</code>这里是将user对象存储进当前的request context中，_request_ctx_stack是一个LocalStack对象，top属性指向的就是当前的request context。关于LocalStack及相关技术，请参考拙作<a href="http://www.jianshu.com/p/3f38b777a621" target="_blank" rel="noopener">&lt;&lt;Werkzeug(Flask)之Local、LocalStack和LocalProxy&gt;&gt;</a></p></li><li><code>user_logged_in.send(current_app._get_current_object(), user=_get_user())</code> 此句中<code>user_logged_in</code>是Flask-Login定义的signal，此处通过send来发射此signal，当注册监听此signal的回调函数收到此signal之后就会执行函数。这里send有两个参数，第一个参数是sender对象，此处通过<code>current_app._get_current_object()</code>来获取当前的app对象，即此signal的sender设为当前的应用；第二个参数是该signal携带的数据，此处将user对象做为signal的数据传递给相应的回调函数。关于signal的详细解释请参考拙作<a href="http://www.jianshu.com/p/756ed0267f53" target="_blank" rel="noopener">&lt;<flask signals详解="">&gt;</flask></a><h3 id="非首次登陆"><a href="#非首次登陆" class="headerlink" title="非首次登陆"></a>非首次登陆</h3>非首次登陆流程图如下：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3959253-7ea20e139da6e2ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非首次登陆"></p><p>在这个流程图中，Flask-Login主要起如下作用：</p><ol><li>从session中获取用户ID</li><li>当用户的请求访问的是受登录保护的路由时，就要通过用户ID重新load user，如果load user失败则进入鉴权失败处理流程，如果成功，则允许正常处理请求<br>那么Flask-Login究竟是如何保护路由的呢？我们来看个例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">@app.route(&apos;/main&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def main():</span><br><span class="line">    return render_template(</span><br><span class="line">        &apos;main.html&apos;, username=current_user.username)</span><br></pre></td></tr></table></figure></li></ol><p>我们看到只要给路由函数加一个<code>@login_required</code>装饰器就可以了，那么这个装饰器究竟是怎么做到的呢？来看下源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># flask_login/utils.py</span><br><span class="line">def login_required(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def decorated_view(*args, **kwargs):</span><br><span class="line">        # 如果request method为例外method，即在EXEMPT_METHODS中的method，可以不必鉴权</span><br><span class="line">        if request.method in EXEMPT_METHODS:</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        # 如果_login_disabled为True则不必鉴权</span><br><span class="line">        elif current_app.login_manager._login_disabled:</span><br><span class="line">            return func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        # 正常鉴权</span><br><span class="line">        elif not current_user.is_authenticated:</span><br><span class="line">            return current_app.login_manager.unauthorized()</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return decorated_view</span><br></pre></td></tr></table></figure></p><ul><li>默认情况下只有<em>OPTIONS</em> method在EXEMPT_METHODS set中，而GET、PUT、POST等常见的methods都需要鉴权</li><li><code>_login_disabled</code>默认为False</li><li>正常鉴权的关键在于<code>current_user.is_authenticated</code>是否为True，为True则正常处理请求，为False则进入unauthorized处理流程。那么这个current_user到底怎么就能鉴权了？它是怎么来的呢？来看下定义：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># flask_login/utils.py</span><br><span class="line">current_user = LocalProxy(lambda: _get_user())</span><br></pre></td></tr></table></figure></li></ul><p>原来current_user是一个LocalProxy对象，其代理的对象需要通过<code>_get_user()</code>来获取，简单来说_get_user()会返回两种用户，一种是正常的用户对象(鉴权成功)，一种是anonymous用户对象(鉴权失败)。而正常的用户对象其<code>is_authenticated</code>属性总是为True，相对的anonymous用户对象的<code>is_authenticated</code>属性总是为False</p><blockquote><p>LocalProxy对象每次操作都会重新获取代理的对象从而实现动态更新，关于LocalProxy的详细说明请参考拙作<a href="http://www.jianshu.com/p/3f38b777a621" target="_blank" rel="noopener">&lt;&lt;Werkzeug(Flask)之Local、LocalStack和LocalProxy&gt;&gt;</a></p></blockquote><p>而要实现动态更新的关键就在于<code>_get_user</code>函数，接下来我们看下<code>_get_user</code>函数是如何获取user对象的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># flask_login/utils.py</span><br><span class="line">def _get_user():</span><br><span class="line">    if has_request_context() and not hasattr(_request_ctx_stack.top, &apos;user&apos;):</span><br><span class="line">        current_app.login_manager._load_user()</span><br><span class="line"></span><br><span class="line">    return getattr(_request_ctx_stack.top, &apos;user&apos;, None)</span><br></pre></td></tr></table></figure></p><p>在之前的首次登陆那小节中，我们已经知道用户鉴权成功后，会将User对象保存在当前的request context当中，这时我们调用<code>_get_user</code>函数时就会直接从request context中获取user对象<code>return getattr(_request_ctx_stack.top, &#39;user&#39;, None)</code><br>但如果是非首次登陆，当前request context中并没有保存user对象，就需要调用<code>current_app.login_manager._load_user()</code>来去load user对象，接下来再看看如何去load：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># flask_login/login_manager.py</span><br><span class="line">def _load_user(self):</span><br><span class="line">        &apos;&apos;&apos;Loads user from session or remember_me cookie as applicable&apos;&apos;&apos;</span><br><span class="line">        user_accessed.send(current_app._get_current_object())</span><br><span class="line"></span><br><span class="line">        # first check SESSION_PROTECTION</span><br><span class="line">        config = current_app.config</span><br><span class="line">        if config.get(&apos;SESSION_PROTECTION&apos;, self.session_protection):</span><br><span class="line">            deleted = self._session_protection()</span><br><span class="line">            if deleted:</span><br><span class="line">                return self.reload_user()</span><br><span class="line"></span><br><span class="line">        # If a remember cookie is set, and the session is not, move the</span><br><span class="line">        # cookie user ID to the session.</span><br><span class="line">        #</span><br><span class="line">        # However, the session may have been set if the user has been</span><br><span class="line">        # logged out on this request, &apos;remember&apos; would be set to clear,</span><br><span class="line">        # so we should check for that and not restore the session.</span><br><span class="line">        is_missing_user_id = &apos;user_id&apos; not in session</span><br><span class="line">        if is_missing_user_id:</span><br><span class="line">            cookie_name = config.get(&apos;REMEMBER_COOKIE_NAME&apos;, COOKIE_NAME)</span><br><span class="line">            header_name = config.get(&apos;AUTH_HEADER_NAME&apos;, AUTH_HEADER_NAME)</span><br><span class="line">            has_cookie = (cookie_name in request.cookies and</span><br><span class="line">                          session.get(&apos;remember&apos;) != &apos;clear&apos;)</span><br><span class="line">            if has_cookie:</span><br><span class="line">                return self._load_from_cookie(request.cookies[cookie_name])</span><br><span class="line">            elif self.request_callback:</span><br><span class="line">                return self._load_from_request(request)</span><br><span class="line">            elif header_name in request.headers:</span><br><span class="line">                return self._load_from_header(request.headers[header_name])</span><br><span class="line"></span><br><span class="line">        return self.reload_user()</span><br></pre></td></tr></table></figure></p><ul><li><code>_load_user</code>大体的过程是首先检查<em>SESSION_PROTECTION</em>设置，如果<em>SESSION_PROTECTION</em> 为strong或者basic类型，那么就会执行<code>_session_protection()</code>动作，否则不执行此操作。<code>_session_protection</code>在session_id不一致的时候(比如IP变化会导致session id的变化)才真正有用，这时，如果为basic类型或者session permanent为True时，只标注session为非新鲜的(not fresh)；而如果为strong，则会删除session中的用户信息，并重新load user，即调用<code>reload_user</code>。<blockquote><p>session permanent为True时，用户退出浏览器不会删除session，其会保留permanent_session_lifetime s(默认是31天)，但是当其为False且<em>SESSION_PROTECTION</em> 设为strong时，用户的session就会被删除。</p></blockquote></li><li>接下来的代码是说当session中没有用户信息时(这里通过是否能获取到<code>user_id</code>来判断)，如果有则直接<code>reload_user</code>,如果没有，则有三种方式来load user，一种是通过remember cookie，一种通过request，一种是通过request header，依次尝试。<blockquote><p>remember cookie是指，当用户勾选’remember me’复选框时，Flask-Login会将用户信息放入到指定的cookie当中，同样也是加密的。这就是为什么当session中没有携带用户信息时，我们可以通过remember cookie来获取用户的信息</p></blockquote></li></ul><p>而<code>reload_user</code>是如何获取用户的呢，来看下源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># flask_login/login_manager.py</span><br><span class="line">def reload_user(self, user=None):</span><br><span class="line">        ctx = _request_ctx_stack.top</span><br><span class="line"></span><br><span class="line">        if user is None:</span><br><span class="line">            user_id = session.get(&apos;user_id&apos;)</span><br><span class="line">            if user_id is None:</span><br><span class="line">                # 当无法获取到有效的用户id时，就认为是anonymous user</span><br><span class="line">                ctx.user = self.anonymous_user()</span><br><span class="line">            else:</span><br><span class="line">                # user callback就是我们通过@login_manager.user_loader装饰的函数，用于获取user object</span><br><span class="line">                if self.user_callback is None:</span><br><span class="line">                    raise Exception(</span><br><span class="line">                        &quot;No user_loader has been installed for this &quot;</span><br><span class="line">                        &quot;LoginManager. Add one with the &quot;</span><br><span class="line">                        &quot;&apos;LoginManager.user_loader&apos; decorator.&quot;)</span><br><span class="line">                user = self.user_callback(user_id)</span><br><span class="line">                if user is None:</span><br><span class="line">                    ctx.user = self.anonymous_user()</span><br><span class="line">                else:</span><br><span class="line">                    ctx.user = user</span><br><span class="line">        else:</span><br><span class="line">            ctx.user = user</span><br></pre></td></tr></table></figure></p><ul><li>首先获取user id，如果获取不到有效的id，就将user设为anonymous user</li><li>获取到id后，再通过@login_manager.user_loader装饰的函数获取到user对象，如果没有获取到有效的user对象，就认为是anonymous user</li><li>最后将user保存于request context中（无论是正常的用户还是anonymous用户）</li></ul><p>至此，我们已经将Flask-Login的核心代码剖析了一遍，如果你有收获，不妨点个赞鼓励一下吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于Flask登录认证的详细过程请参见拙作&lt;a href=&quot;http://www.jianshu.com/p/06bd93e21945&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;lt;&amp;lt;使用Flask实现用户登陆认证的详细过程&amp;gt;&amp;gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Werkzeug(Flask)之Local、LocalStack和LocalProxy</title>
    <link href="http://yoursite.com/2017/10/08/Werkzeug-Local/"/>
    <id>http://yoursite.com/2017/10/08/Werkzeug-Local/</id>
    <published>2017-10-08T10:18:18.000Z</published>
    <updated>2018-08-12T05:29:42.840Z</updated>
    
    <content type="html"><![CDATA[<p>在我们使用Flask以及Werkzeug框架的过程中，经常会遇到如下三个概念：Local、LocalStack和LocalProxy。尤其在学习Flask的Request Context和App Context的过程中，这几个概念出现的更加频繁，另外很多Flask插件都会使用这三个概念对应的技术。那么这三个东西到底是什么？我们为什么需要它们？以及如何使用呢？本篇文章主要就是来解答这些问题。</p><h2 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h2><p>这部分我们重点介绍Local概念，主要分为以下几个部分：</p><ul><li>为什么需要Local？</li><li>Local的使用</li><li>Local的实现<h4 id="为什么需要Local？"><a href="#为什么需要Local？" class="headerlink" title="为什么需要Local？"></a>为什么需要Local？</h4>在Python的标准库中提供了<code>thread local</code>对象用于存储<em>thread-safe</em>和<em>thread-specific</em>的数据，通过这种方式存储的数据只在本线程中有效，而对于其它线程则不可见。正是基于这样的特性，我们可以把针对线程全局的数据存储进<code>thread local</code>对象，举个简单的例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;from threading import local</span><br><span class="line">&gt;&gt;thread_local_data = local()</span><br><span class="line">&gt;&gt;thread_local_data.user_name=&quot;Jim&quot;</span><br><span class="line">&gt;&gt;thread_local_data.user_name</span><br><span class="line">&apos;Jim&apos;</span><br></pre></td></tr></table></figure></li></ul><p>使用<code>thread local</code>对象虽然可以基于线程存储全局变量，但是在Web应用中可能会存在如下问题：</p><ol><li>有些应用使用的是greenlet协程，这种情况下无法保证协程之间数据的隔离，因为不同的协程可以在同一个线程当中。</li><li>即使使用的是线程，WSGI应用也无法保证每个http请求使用的都是不同的线程，因为后一个http请求可能使用的是之前的http请求的线程，这样的话存储于<code>thread local</code>中的数据可能是之前残留的数据。</li></ol><p>为了解决上述问题，Werkzeug开发了自己的local对象，这也是为什么我们需要Werkzeug的local对象</p><h4 id="Local的使用"><a href="#Local的使用" class="headerlink" title="Local的使用"></a>Local的使用</h4><p>先举一个简单的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from werkzeug.local import Local, LocalManager</span><br><span class="line"></span><br><span class="line">local = Local()</span><br><span class="line">local_manager = LocalManager([local])</span><br><span class="line"></span><br><span class="line">def application(environ, start_response):</span><br><span class="line">    local.request = request = Request(environ)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"># make_middleware会确保当request结束时，所有存储于local中的对象的reference被清除</span><br><span class="line">application = local_manager.make_middleware(application)</span><br></pre></td></tr></table></figure></p><ul><li>首先Local对象需要通过LocalManager来管理，初次生成LocalManager对象需要传一个list类型的参数，list中是Local对象，当有新的Local对象时，可以通过<code>local_manager.locals.append()</code>来添加。而当LocalManager对象清理的时候会将所有存储于locals中的当前context的数据都清理掉</li><li>上例中当local.request被赋值之后，其可以在当前context中作为全局数据使用</li><li>所谓当前context(the same context)意味着是在同一个greenlet(如果有)中，也就肯定是在同一个线程当中</li></ul><p>那么Werkzeug的Local对象是如何实现这种在相同的context环境下保证数据的全局性和隔离性的呢？</p><h4 id="Local的实现"><a href="#Local的实现" class="headerlink" title="Local的实现"></a>Local的实现</h4><p>我们先来看下源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 在有greenlet的情况下，get_indent实际获取的是greenlet的id，而没有greenlet的情况下获取的是thread id</span><br><span class="line">try:</span><br><span class="line">    from greenlet import getcurrent as get_ident</span><br><span class="line">except ImportError:</span><br><span class="line">    try:</span><br><span class="line">        from thread import get_ident</span><br><span class="line">    except ImportError:</span><br><span class="line">        from _thread import get_ident</span><br><span class="line"></span><br><span class="line">class Local(object):</span><br><span class="line">    __slots__ = (&apos;__storage__&apos;, &apos;__ident_func__&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        object.__setattr__(self, &apos;__storage__&apos;, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, &apos;__ident_func__&apos;, get_ident)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    # 当调用Local对象时，返回对应的LocalProxy</span><br><span class="line">    def __call__(self, proxy):</span><br><span class="line">        &quot;&quot;&quot;Create a proxy for a name.&quot;&quot;&quot;</span><br><span class="line">        return LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    # Local类中特有的method，用于清空greenlet id或线程id对应的dict数据</span><br><span class="line">    def __release_local__(self):</span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), None)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, name):</span><br><span class="line">        try:</span><br><span class="line">            return self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(name)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, name, value):</span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        try:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        except KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, name):</span><br><span class="line">        try:</span><br><span class="line">            del self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(name)</span><br></pre></td></tr></table></figure></p><ul><li>这段代码实际是对<code>__storage__</code> dict的封装，而这个dict中的key使用的就是get_indent函数获取的id（当有greenlet时使用greenlet id，没有则使用thread id）</li><li><code>__storage__</code> dict中的value也是一个dict，这个dict就是该greenlet(或者线程)对应的local存储空间</li><li>通过重新实现<code>__getattr__</code>, <code>__setattr__</code>等魔术方法，我们在greenlet或者线程中使用local对象时，实际会自动获取greenlet id(或者线程id)，从而获取到对应的dict存储空间，再通过name key就可以获取到真正的存储的对象</li><li>当我们需要释放local数据的内存时，可以通过调用release_local()函数来释放当前context的local数据，如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; loc = Local()</span><br><span class="line">&gt;&gt;&gt; loc.foo = 42</span><br><span class="line">&gt;&gt;&gt; release_local(loc)  # release_local实际调用local对象的__release_local__ method</span><br><span class="line">&gt;&gt;&gt; hasattr(loc, &apos;foo&apos;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li></ul><h2 id="LocalStack"><a href="#LocalStack" class="headerlink" title="LocalStack"></a>LocalStack</h2><p>LocalStack与Local对象类似，都是可以基于Greenlet协程或者线程进行全局存储的存储空间(实际LocalStack是对Local进行了二次封装），区别在于其数据结构是栈的形式。示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ls = LocalStack()</span><br><span class="line">&gt;&gt;&gt; ls.push(42)</span><br><span class="line">&gt;&gt;&gt; ls.top</span><br><span class="line">42</span><br><span class="line">&gt;&gt;&gt; ls.push(23)</span><br><span class="line">&gt;&gt;&gt; ls.top</span><br><span class="line">23</span><br><span class="line">&gt;&gt;&gt; ls.pop()</span><br><span class="line">23</span><br><span class="line">&gt;&gt;&gt; ls.top</span><br><span class="line">42</span><br></pre></td></tr></table></figure></p><ul><li>从示例看出Local对象存储的时候是类似字典的方式，需要有key和value，而LocalStack是基于栈的，通过push和pop来存储和弹出数据</li><li>另外，当我们想释放存储空间的时候，也可以调用release_local()</li></ul><p>LocalStack在Flask框架中会频繁的出现，其Request Context和App Context的实现都是基于LocalStack，具体可以参考Github上的<a href="https://github.com/pallets/flask/tree/master/flask" target="_blank" rel="noopener">Flask源码</a></p><h2 id="LocalProxy"><a href="#LocalProxy" class="headerlink" title="LocalProxy"></a>LocalProxy</h2><p>LocalProxy用于代理Local对象和LocalStack对象，而所谓代理就是作为中间的代理人来处理所有针对被代理对象的操作，如下图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/3959253-e64c1ca00b6f14e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="proxy.jpg"></p><p>接下来我们将重点讲下如下内容：</p><ul><li>LocalProxy的使用</li><li>LocalProxy代码解析</li><li>为什么要使用LocalProxy<h4 id="LocalProxy的使用"><a href="#LocalProxy的使用" class="headerlink" title="LocalProxy的使用"></a>LocalProxy的使用</h4>初始化LocalProxy有三种方式：</li></ul><ol><li>通过Local或者LocalStack对象的<code>__call__</code> method<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from werkzeug.local import Local</span><br><span class="line">l = Local()</span><br><span class="line"></span><br><span class="line"># these are proxies</span><br><span class="line">request = l(&apos;request&apos;)</span><br><span class="line">user = l(&apos;user&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from werkzeug.local import LocalStack</span><br><span class="line">_response_local = LocalStack()</span><br><span class="line"></span><br><span class="line"># this is a proxy</span><br><span class="line">response = _response_local()</span><br></pre></td></tr></table></figure></li></ol><p>上述代码直接将对象像函数一样调用，这是因为Local和LocalStack都实现了<code>__call__</code> method，这样其对象就是callable的，因此当我们将对象作为函数调用时，实际调用的是<code>__call__</code> method，可以看下本文开头部分的Local的源代码，会发现<code>__call__</code> method会返回一个LocalProxy对象</p><ol start="2"><li>通过LocalProxy类进行初始化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = Local()</span><br><span class="line">request = LocalProxy(l, &apos;request&apos;)</span><br></pre></td></tr></table></figure></li></ol><p>实际上这段代码跟第一种方式是等价的，但这种方式是最’原始’的方式，我们在Local的源代码实现中看到其<code>__call__</code> method就是通过这种方式生成LocalProxy的</p><ol start="3"><li>使用callable对象作为参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request = LocalProxy(get_current_request())</span><br></pre></td></tr></table></figure></li></ol><p>通过传递一个函数，我们可以自定义如何返回Local或LocalStack对象</p><p>那么LocalProxy是如何实现这种代理的呢？接下来看下源码解析</p><h4 id="LocalProxy代码解析"><a href="#LocalProxy代码解析" class="headerlink" title="LocalProxy代码解析"></a>LocalProxy代码解析</h4><p>下面截取LocalProxy的部分代码，我们来进行解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># LocalProxy部分代码</span><br><span class="line"></span><br><span class="line">@implements_bool</span><br><span class="line">class LocalProxy(object):</span><br><span class="line">    __slots__ = (&apos;__local&apos;, &apos;__dict__&apos;, &apos;__name__&apos;, &apos;__wrapped__&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, local, name=None):</span><br><span class="line">        object.__setattr__(self, &apos;_LocalProxy__local&apos;, local)</span><br><span class="line">        object.__setattr__(self, &apos;__name__&apos;, name)</span><br><span class="line">        if callable(local) and not hasattr(local, &apos;__release_local__&apos;):</span><br><span class="line">            # &quot;local&quot; is a callable that is not an instance of Local or</span><br><span class="line">            # LocalManager: mark it as a wrapped function.</span><br><span class="line">            object.__setattr__(self, &apos;__wrapped__&apos;, local)</span><br><span class="line"></span><br><span class="line">    def _get_current_object(self):</span><br><span class="line">        &quot;&quot;&quot;Return the current object.  This is useful if you want the real</span><br><span class="line">        object behind the proxy at a time for performance reasons or because</span><br><span class="line">        you want to pass the object into a different context.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 由于所有Local或LocalStack对象都有__release_local__ method, 所以如果没有该属性就表明self.__local为callable对象</span><br><span class="line">        if not hasattr(self.__local, &apos;__release_local__&apos;):</span><br><span class="line">            return self.__local()</span><br><span class="line">        try:</span><br><span class="line">            # 此处self.__local为Local或LocalStack对象</span><br><span class="line">            return getattr(self.__local, self.__name__)</span><br><span class="line">        except AttributeError:</span><br><span class="line">            raise RuntimeError(&apos;no object bound to %s&apos; % self.__name__)</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def __dict__(self):</span><br><span class="line">        try:</span><br><span class="line">            return self._get_current_object().__dict__</span><br><span class="line">        except RuntimeError:</span><br><span class="line">            raise AttributeError(&apos;__dict__&apos;)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, name):</span><br><span class="line">        if name == &apos;__members__&apos;:</span><br><span class="line">            return dir(self._get_current_object())</span><br><span class="line">        return getattr(self._get_current_object(), name)</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        self._get_current_object()[key] = value</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        del self._get_current_object()[key]</span><br><span class="line"></span><br><span class="line">    if PY2:</span><br><span class="line">        __getslice__ = lambda x, i, j: x._get_current_object()[i:j]</span><br><span class="line"></span><br><span class="line">        def __setslice__(self, i, j, seq):</span><br><span class="line">            self._get_current_object()[i:j] = seq</span><br><span class="line"></span><br><span class="line">        def __delslice__(self, i, j):</span><br><span class="line">            del self._get_current_object()[i:j]</span><br><span class="line"></span><br><span class="line">    # 截取部分操作符代码</span><br><span class="line">    __setattr__ = lambda x, n, v: setattr(x._get_current_object(), n, v)</span><br><span class="line">    __delattr__ = lambda x, n: delattr(x._get_current_object(), n)</span><br><span class="line">    __str__ = lambda x: str(x._get_current_object())</span><br><span class="line">    __lt__ = lambda x, o: x._get_current_object() &lt; o</span><br><span class="line">    __le__ = lambda x, o: x._get_current_object() &lt;= o</span><br><span class="line">    __eq__ = lambda x, o: x._get_current_object() == o</span><br></pre></td></tr></table></figure></p><ul><li>首先在<code>__init__</code> method中传递的<code>local</code>参数会被赋予属性<code>_LocalProxy__local</code>,该属性可以通过<code>self.local</code>进行访问，关于这一点可以看<a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name" target="_blank" rel="noopener">StackOverflow的问题回答</a></li><li>LocalProxy通过<code>_get_current_object</code>来获取代理的对象。需要注意的是当初始化参数为callable对象时，则直接调用以返回Local或LocalStack对象，具体看源代码的注释。</li><li>重载了绝大多数操作符，以便在调用LocalProxy的相应操作时，通过<code>_get_current_object</code> method来获取真正代理的对象，然后再进行相应操作</li></ul><h4 id="为什么要使用LocalProxy"><a href="#为什么要使用LocalProxy" class="headerlink" title="为什么要使用LocalProxy"></a>为什么要使用LocalProxy</h4><p>可是说了这么多，为什么一定要用proxy，而不能直接调用Local或LocalStack对象呢？这主要是在有多个可供调用的对象的时候会出现问题，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/3959253-b474030cec52260b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="multiple objects"></p><p>我们再通过下面的代码也许可以看出一二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># use Local object directly</span><br><span class="line">from werkzeug.local import LocalStack</span><br><span class="line">user_stack = LocalStack()</span><br><span class="line">user_stack.push(&#123;&apos;name&apos;: &apos;Bob&apos;&#125;)</span><br><span class="line">user_stack.push(&#123;&apos;name&apos;: &apos;John&apos;&#125;)</span><br><span class="line"></span><br><span class="line">def get_user():</span><br><span class="line">    # do something to get User object and return it</span><br><span class="line">    return user_stack.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 直接调用函数获取user对象</span><br><span class="line">user = get_user()</span><br><span class="line">print user[&apos;name&apos;]</span><br><span class="line">print user[&apos;name&apos;]</span><br></pre></td></tr></table></figure></p><p>打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">John</span><br><span class="line">John</span><br></pre></td></tr></table></figure></p><p>再看下使用LocalProxy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># use LocalProxy</span><br><span class="line">from werkzeug.local import LocalStack, LocalProxy</span><br><span class="line">user_stack = LocalStack()</span><br><span class="line">user_stack.push(&#123;&apos;name&apos;: &apos;Bob&apos;&#125;)</span><br><span class="line">user_stack.push(&#123;&apos;name&apos;: &apos;John&apos;&#125;)</span><br><span class="line"></span><br><span class="line">def get_user():</span><br><span class="line">    # do something to get User object and return it</span><br><span class="line">    return user_stack.pop()</span><br><span class="line"></span><br><span class="line"># 通过LocalProxy使用user对象</span><br><span class="line">user = LocalProxy(get_user)</span><br><span class="line">print user[&apos;name&apos;]</span><br><span class="line">print user[&apos;name&apos;]</span><br></pre></td></tr></table></figure></p><p>打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">John</span><br><span class="line">Bob</span><br></pre></td></tr></table></figure></p><p>怎么样，看出区别了吧，直接使用LocalStack对象，user一旦赋值就无法再动态更新了，而使用Proxy，每次调用操作符(这里<code>[]操作符</code>用于获取属性)，都会重新获取user，从而实现了动态更新user的效果。见下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/3959253-b673a9a708167969.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="proxy auto select object"></p><p>Flask以及Flask的插件很多时候都需要这种动态更新的效果，因此LocalProxy就会非常有用了。</p><p>至此，我们针对Local、LocalStack和LocalProxy的概念已经做了详细阐释，如果你觉得文章对你有帮助，不妨点个赞吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们使用Flask以及Werkzeug框架的过程中，经常会遇到如下三个概念：Local、LocalStack和LocalProxy。尤其在学习Flask的Request Context和App Context的过程中，这几个概念出现的更加频繁，另外很多Flask插件都会使
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flask Signals 详解</title>
    <link href="http://yoursite.com/2017/10/05/Flask-Signals/"/>
    <id>http://yoursite.com/2017/10/05/Flask-Signals/</id>
    <published>2017-10-05T14:22:18.000Z</published>
    <updated>2018-08-12T05:28:47.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-Signals简介"><a href="#Flask-Signals简介" class="headerlink" title="Flask Signals简介"></a>Flask Signals简介</h2><p>Flask Signals和操作系统的signals系统很类似，都是通过信号（也可以说是事件event）来通知已经注册的回调函数，让回调函数自动开始执行。Flask定义了自己的一套核心signals和对应的functions(用于发起消息，注册回调函数)，我们需要定义自己的回调函数，然后注册到对应的signal，这样就可以在收到该信号的时候自动执行我们定义的回调函数。</p><h2 id="什么情况下需要使用Signals"><a href="#什么情况下需要使用Signals" class="headerlink" title="什么情况下需要使用Signals?"></a>什么情况下需要使用Signals?</h2><p>当我们需要使用观察者模式来解耦模块之间的信息传递的时候，Signals系统就可以帮助我们轻松达到目的。观察者模式如下图(图片来自voidcn)<br><img src="http://upload-images.jianshu.io/upload_images/3959253-15e7e0cf37d01caa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="观察者模式"></p><h3 id="与Hook函数的区别"><a href="#与Hook函数的区别" class="headerlink" title="与Hook函数的区别"></a>与Hook函数的区别</h3><p>试想，当我们需要监听某个事件，当它发生的时候，需要执行一系列functions，来实现诸如log记录等功能时，我们就可以使用Signals系统来实现，但是这里有一个疑问就是这个功能通过hook函数似乎也可以实现，比如通过<code>before_request</code> decorator实现记录日志的功能和使用<code>request_started</code>来记录日志就非常相似， 如下代码所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from flask import Flask, request, request_started</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.before_request</span><br><span class="line">def print_url_in_hook():</span><br><span class="line">    print &quot;in hook, url: %s&quot; % request.url</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    return &quot;Hello, World!&quot;</span><br><span class="line"></span><br><span class="line">def print_url_in_signal_subscriber(sender, **extra):</span><br><span class="line">    print &quot;in signal subscriber, url: %s&quot; % request.url</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    request_started.connect(print_url_in_signal_subscriber, app)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>当收到http请求后，打印如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in signal subscriber, url: http://localhost:5000/</span><br><span class="line">in hook, url: http://localhost:5000/</span><br><span class="line">127.0.0.1 - - [05/Oct/2017 16:57:20] &quot;GET / HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure></p><p>那么到底什么情况下使用signal，什么情况下使用hook函数呢？我们来看下它们的主要区别：</p><ol><li>signal的callback函数是无顺序的，而hook函数的执行是按照定义的顺序执行的。（这一点虽然是官网提出的区别，但是实际测试发现signal执行实际是按照注册的顺序执行的，即先通过connect进行注册的回调函数会先被执行）</li><li>signal无法直接abort这个request请求，相比较在hook函数中可以直接abort request，即直接返回response给客户端，而无需再执行后续的操作。</li><li>signal可以通过参数携带数据，而hook函数通常不会携带额外的参数<h3 id="与RabbitMQ等消息中间件的区别"><a href="#与RabbitMQ等消息中间件的区别" class="headerlink" title="与RabbitMQ等消息中间件的区别"></a>与RabbitMQ等消息中间件的区别</h3>Rabbitmq与signals都支持观察者模式，但是它们的区别也是很明显的：</li><li>Rabbitmq之类的消息中间件更加重量级，提供更多功能，如分布式部署，消息存储备份等功能，而signal系统显然更加轻量级，只提供简单的消息分发功能</li><li>Rabbitmq之类的消息中间件可以在不同的系统间传递消息，从而使得不同的功能模块可以使用不同的语言进行开发，而signal系统显然仅限于Flask系统中使用</li></ol><p>显然，signal系统使用局限性更大，但也更加轻量级，在只是简单的进行消息分发的系统中，使用signal更加简单方便</p><h2 id="怎么使用Signals"><a href="#怎么使用Signals" class="headerlink" title="怎么使用Signals?"></a>怎么使用Signals?</h2><p>Flask提供的signal机制优先使用<a href="https://pythonhosted.org/blinker/" target="_blank" rel="noopener">blinker</a>提供的库，但当blinker没有安装的时候，Flask也可以回退到使用自己的库。但是鉴于官网推荐使用blinker，所以我们最好还是安装blinker。</p><h3 id="使用blinker"><a href="#使用blinker" class="headerlink" title="使用blinker"></a>使用blinker</h3><p>安装blinker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install blinker</span><br></pre></td></tr></table></figure></p><p>测试Flask signal是否使用blinker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from flask import signals</span><br><span class="line"></span><br><span class="line">In [2]: signals.signals_available</span><br><span class="line">Out[2]: True</span><br></pre></td></tr></table></figure></p><p>当<code>signals.signals_available</code>返回True时，说明使用的是Blinker库</p><h3 id="使用Flask-Built-in-signals"><a href="#使用Flask-Built-in-signals" class="headerlink" title="使用Flask Built-in signals"></a>使用Flask Built-in signals</h3><p>Flask内置有多个signals可以直接使用，这些signals会自动emit(发射)，我们只需要定义自己的回调函数，然后通过connect方式来subscribe我们定义的函数到对应的signal即可监听该signal</p><p>下表展示了Flask内置的Signals，详细请参考<a href="http://flask.pocoo.org/docs/0.12/api/#core-signals-list" target="_blank" rel="noopener">Flask built-in signals</a>:</p><table><thead><tr><th>Signals</th><th>说明</th></tr></thead><tbody><tr><td>template_rendered</td><td>当template被成功渲染之后会触发</td></tr><tr><td>before_render_template</td><td>当template被渲染之前会触发</td></tr><tr><td>request_started</td><td>当request context建立好之后，并在request被处理之前</td></tr><tr><td>request_finished</td><td>当发送response给客户端之后被触发</td></tr><tr><td>got_request_exception</td><td>当request处理过程中发生异常时，该signal会被触发，它甚至早于程序中的异常处理</td></tr><tr><td>request_tearing_down</td><td>当request tear down的时候触发，无论何种情况该signal都会被触发，即使发生异常</td></tr><tr><td>appcontext_tearing_down</td><td>当应用的context tear down的时候触发</td></tr><tr><td>appcontext_pushed</td><td>当应用的context被push时触发</td></tr><tr><td>appcontext_popped</td><td>当应用的context被pop时触发</td></tr><tr><td>message_flashed</td><td>当应用发送flash message时触发</td></tr></tbody></table><p>之前的例子我们已经看到如何使用<code>request_started</code> signal了，这里需要说明两点：</p><ol><li>在定义回调函数时，第一个参数必须是sender对象（即发送该signal的对象），第二个参数**extra用于接受额外的参数，也防止将来Flask在发送signal时添加新的参数。</li><li>使用connect注册回调函数时，第一个参数是回调函数，这个是必须的，第二参数是sender对象，是可选的，但最佳实践是要明确发送该signal的对象</li></ol><p>另外，我们也可以临时性注册一个回调函数，这个尤其在进行单元测试时非常有用，因为我们不想在实际程序中添加测试相关的回调函数，因此需要一种机制在测试完成后，再取消注册该回调函数，有两种方式可以此种临时注册的机制：</p><ul><li>一种是通过<code>contextmanager</code>decorator和disconnect函数一起来实现，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import template_rendered</span><br><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def captured_templates(app):</span><br><span class="line">    recorded = []</span><br><span class="line">    def record(sender, template, context, **extra):</span><br><span class="line">        recorded.append((template, context))</span><br><span class="line">    # 当使用with关键字进入with context时，自动注册record函数到template_rendered signal</span><br><span class="line">    template_rendered.connect(record, app)</span><br><span class="line">    try:</span><br><span class="line">        yield recorded</span><br><span class="line">    finally:</span><br><span class="line">        # with context结束时会自动调用disconnect函数来解除注册</span><br><span class="line">        template_rendered.disconnect(record, app)</span><br></pre></td></tr></table></figure></li></ul><p>使用时代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">with captured_templates(app) as templates:</span><br><span class="line">    rv = app.test_client().get(&apos;/&apos;)</span><br><span class="line">    assert rv.status_code == 200</span><br><span class="line">    assert len(templates) == 1</span><br><span class="line">    template, context = templates[0]</span><br><span class="line">    assert template.name == &apos;index.html&apos;</span><br><span class="line">    assert len(context[&apos;items&apos;]) == 10</span><br></pre></td></tr></table></figure></p><ul><li>另外一种方式是使用connect_to函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import template_rendered</span><br><span class="line"></span><br><span class="line">def captured_templates(app, recorded, **extra):</span><br><span class="line">    def record(sender, template, context):</span><br><span class="line">        recorded.append((template, context))</span><br><span class="line">    return template_rendered.connected_to(record, app)</span><br></pre></td></tr></table></figure></li></ul><p>使用时代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">templates = []</span><br><span class="line">with captured_templates(app, templates, **extra):</span><br><span class="line">    ...</span><br><span class="line">    template, context = templates[0]</span><br></pre></td></tr></table></figure></p><h3 id="自定义signals的使用"><a href="#自定义signals的使用" class="headerlink" title="自定义signals的使用"></a>自定义signals的使用</h3><h4 id="自定义signal"><a href="#自定义signal" class="headerlink" title="自定义signal"></a>自定义signal</h4><p>当我们需要自定义signal时，我们可以直接使用blinker库</p><ol><li><p>首先定义一个namespace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from blinker import Namespace</span><br><span class="line">my_signals = Namespace()</span><br></pre></td></tr></table></figure></li><li><p>使用我们自定义的namespace定义自己的signal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload_image_finished = my_signals.signal(&apos;upload_image_finished&apos;)</span><br></pre></td></tr></table></figure></li></ol><p>至此，我们就定义了一个signal，名为<code>upload_image_finished</code></p><h4 id="发射自定义signal"><a href="#发射自定义signal" class="headerlink" title="发射自定义signal"></a>发射自定义signal</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import current_app</span><br><span class="line"></span><br><span class="line">def upload_image(image_path, upload_url):</span><br><span class="line">    # upload image code</span><br><span class="line">    ...</span><br><span class="line">    # after upload image</span><br><span class="line">    upload_image_finished.send(current_app._get_current_object())</span><br></pre></td></tr></table></figure><ul><li>当在类的method中使用send函数发射signal时，我们可以选择该类的对象作为sender对象，因此直接使用self作为参数，但是当我们不是在类的method当中，或者我们想让应用对象作为sender，那么我们就需使用如上代码所示的current_app._get_current_object()来获取应用对象</li><li>使用sender时，第一个参数是sender对象，是必选的。其余实际我们还可以传递更多参数(记得我们的callback函数使用了**extra), 这样的话我们实际就拥有了传递更多数据的能力。</li></ul><h3 id="注册回调函数的简化写法"><a href="#注册回调函数的简化写法" class="headerlink" title="注册回调函数的简化写法"></a>注册回调函数的简化写法</h3><p>从文章的第一个示例可以看出我们需要通过调用connect函数来对回调函数进行注册, 其实还有一个简化的写法可以把回调函数的定义和注册过程结合在一起，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask import template_rendered</span><br><span class="line"></span><br><span class="line">@template_rendered.connect_via(app)</span><br><span class="line">def when_template_rendered(sender, template, context, **extra):</span><br><span class="line">    print &apos;Template %s is rendered with %s&apos; % (template.name, context)</span><br></pre></td></tr></table></figure></p><p>通过connect_via装饰器来简化回调函数定义和注册的过程</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://flask.pocoo.org/docs/0.12/signals/" target="_blank" rel="noopener">Flask Signals</a></li><li><a href="https://pythonhosted.org/blinker/" target="_blank" rel="noopener">Blinker Doc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flask-Signals简介&quot;&gt;&lt;a href=&quot;#Flask-Signals简介&quot; class=&quot;headerlink&quot; title=&quot;Flask Signals简介&quot;&gt;&lt;/a&gt;Flask Signals简介&lt;/h2&gt;&lt;p&gt;Flask Signals和操作系统
      
    
    </summary>
    
    
  </entry>
  
</feed>
